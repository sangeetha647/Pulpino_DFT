1 63 63 DBG_AXI_REGSELECT_SIZE "1" 
1 64 64 DBG_AXI_NUM_INTREG "1" 
1 68 68 DBG_AXI_INTREG_ERROR "1'b0" 
1 85 85 DBG_AXI_CMD_BWRITE8 "4'h1" 
1 86 86 DBG_AXI_CMD_BWRITE16 "4'h2" 
1 87 87 DBG_AXI_CMD_BWRITE32 "4'h3" 
1 88 88 DBG_AXI_CMD_BWRITE64 "4'h4" 
1 89 89 DBG_AXI_CMD_BREAD8 "4'h5" 
1 90 90 DBG_AXI_CMD_BREAD16 "4'h6" 
1 91 91 DBG_AXI_CMD_BREAD32 "4'h7" 
1 92 92 DBG_AXI_CMD_BREAD64 "4'h8" 
1 93 93 DBG_AXI_CMD_IREG_WR "4'h9" 
1 94 94 DBG_AXI_CMD_IREG_SEL "4'hd" 
4 42 42 DBG_TOP_MODULE_ID_LENGTH "2" 
4 45 45 DBG_TOP_MAX_MODULES "4" 
4 48 48 DBG_TOP_WISHBONE_DEBUG_MODULE "2'h0" 
4 49 49 DBG_TOP_CPU0_DEBUG_MODULE "2'h1" 
4 50 50 DBG_TOP_CPU1_DEBUG_MODULE "2'h2" 
4 51 51 DBG_TOP_JSP_DEBUG_MODULE "2'h3" 
4 54 54 DBG_TOP_MODULE_DATA_LEN "64" 
4 58 58 DBG_WISHBONE_SUPPORTED "" 
4 61 61 DBG_CPU0_SUPPORTED "" 
4 67 67 DBG_JSP_SUPPORTED "" 
4 71 71 ADBG_JSP_SUPPORT_MULTI "" 
4 75 75 ADBG_USE_HISPEED "" 
5 264 264 STATE_IDLE "1'h0" 
5 265 265 STATE_TRANSFER "1'h1" 
6 65 65 DBG_OR1K_INTREG_STATUS "3'b000" 
6 80 80 DBG_OR1K_CMD_BWRITE32 "4'h3" 
6 81 81 DBG_OR1K_CMD_BREAD32 "4'h7" 
6 82 82 DBG_OR1K_CMD_IREG_WR "4'h9" 
6 83 83 DBG_OR1K_CMD_IREG_SEL "4'hd" 
9 63 63 IDCODE_VALUE "32'h249511c3" 
9 70 70 IR_LENGTH "4" 
9 73 73 EXTEST "4'b0000" 
9 74 74 SAMPLE_PRELOAD "4'b0001" 
9 75 75 IDCODE "4'b0010" 
9 76 76 DEBUG "4'b1000" 
9 77 77 MBIST "4'b1001" 
9 78 78 BYPASS "4'b1111" 
10 203 203 STATE_test_logic_reset "4'hF" 
10 204 204 STATE_run_test_idle "4'hC" 
10 205 205 STATE_select_dr_scan "4'h7" 
10 206 206 STATE_capture_dr "4'h6" 
10 207 207 STATE_shift_dr "4'h2" 
10 208 208 STATE_exit1_dr "4'h1" 
10 209 209 STATE_pause_dr "4'h3" 
10 210 210 STATE_exit2_dr "4'h0" 
10 211 211 STATE_update_dr "4'h5" 
10 212 212 STATE_select_ir_scan "4'h4" 
10 213 213 STATE_capture_ir "4'hE" 
10 214 214 STATE_shift_ir "4'hA" 
10 215 215 STATE_exit1_ir "4'h9" 
10 216 216 STATE_pause_ir "4'hB" 
10 217 217 STATE_exit2_ir "4'h8" 
10 218 218 STATE_update_ir "4'hD" 
14 13 13 APB_BUS_SV "" 
14 18 18 NB_MASTER "9" 
14 21 21 UART_START_ADDR "32'h1A10_0000" 
14 22 22 UART_END_ADDR "32'h1A10_0FFF" 
14 25 25 GPIO_START_ADDR "32'h1A10_1000" 
14 26 26 GPIO_END_ADDR "32'h1A10_1FFF" 
14 29 29 SPI_START_ADDR "32'h1A10_2000" 
14 30 30 SPI_END_ADDR "32'h1A10_2FFF" 
14 33 33 TIMER_START_ADDR "32'h1A10_3000" 
14 34 34 TIMER_END_ADDR "32'h1A10_3FFF" 
14 37 37 EVENT_UNIT_START_ADDR "32'h1A10_4000" 
14 38 38 EVENT_UNIT_END_ADDR "32'h1A10_4FFF" 
14 41 41 I2C_START_ADDR "32'h1A10_5000" 
14 42 42 I2C_END_ADDR "32'h1A10_5FFF" 
14 45 45 FLL_START_ADDR "32'h1A10_6000" 
14 46 46 FLL_END_ADDR "32'h1A10_6FFF" 
14 49 49 SOC_CTRL_START_ADDR "32'h1A10_7000" 
14 50 50 SOC_CTRL_END_ADDR "32'h1A10_7FFF" 
14 53 53 DEBUG_START_ADDR "32'h1A11_0000" 
14 54 54 DEBUG_END_ADDR "32'h1A11_7FFF" 
14 56 64 APB_ASSIGN_SLAVE "assign lhs.paddr    = rhs.paddr;       assign lhs.pwdata   = rhs.pwdata;      assign lhs.pwrite   = rhs.pwrite;      assign lhs.psel     = rhs.psel;        assign lhs.penable  = rhs.penable;     assign rhs.prdata   = lhs.prdata;      assign rhs.pready   = lhs.pready;      assign rhs.pslverr  = lhs.pslverr;" 
14 66 66 APB_ASSIGN_MASTER "`APB_ASSIGN_SLAVE(rhs, lhs)" 
17 11 11 REG_PADDIR_00_31 "5'b00000" 
17 12 12 REG_GPIOEN_00_31 "5'b00001" 
17 13 13 REG_PADIN_00_31 "5'b00010" 
17 14 14 REG_PADOUT_00_31 "5'b00011" 
17 15 15 REG_PADOUTSET_00_31 "5'b00100" 
17 16 16 REG_PADOUTCLR_00_31 "5'b00101" 
17 17 17 REG_INTEN_00_31 "5'b00110" 
17 18 18 REG_INTTYPE_00_15 "5'b00111" 
17 19 19 REG_INTTYPE_16_31 "5'b01000" 
17 20 20 REG_INTSTATUS_00_31 "5'b01001" 
17 21 21 REG_PADCFG_00_07 "5'b01010" 
17 22 22 REG_PADCFG_08_15 "5'b01011" 
17 23 23 REG_PADCFG_16_23 "5'b01100" 
17 24 24 REG_PADCFG_24_31 "5'b01101" 
17 26 26 REG_PADDIR_32_63 "5'b01110" 
17 27 27 REG_GPIOEN_32_63 "5'b01111" 
17 28 28 REG_PADIN_32_63 "5'b10000" 
17 29 29 REG_PADOUT_32_63 "5'b10001" 
17 30 30 REG_PADOUTSET_32_63 "5'b10010" 
17 31 31 REG_PADOUTCLR_32_63 "5'b10011" 
17 32 32 REG_INTEN_32_63 "5'b10100" 
17 33 33 REG_INTTYPE_32_47 "5'b10101" 
17 34 34 REG_INTTYPE_48_63 "5'b10110" 
17 35 35 REG_INTSTATUS_32_63 "5'b10111" 
17 36 36 REG_PADCFG_32_39 "5'b11000" 
17 37 37 REG_PADCFG_40_47 "5'b11001" 
17 38 38 REG_PADCFG_48_55 "5'b11010" 
17 39 39 REG_PADCFG_56_63 "5'b11011" 
18 3 3 REG_CLK_PRESCALER "4'b000" 
18 4 4 REG_CTRL "4'b001" 
18 5 5 REG_RX "4'b010" 
18 6 6 REG_STATUS "4'b011" 
18 7 7 REG_TX "4'b100" 
18 8 8 REG_CMD "4'b101" 
22 13 13 REG_PAD_MUX "4'b0000" 
22 14 14 REG_CLK_GATE "4'b0001" 
22 15 15 REG_BOOT_ADR "4'b0010" 
22 16 16 REG_INFO "4'b0100" 
22 17 17 REG_STATUS "4'b0101" 
22 20 20 REG_PADCFG0 "4'b1000" 
22 21 21 REG_PADCFG1 "4'b1001" 
22 22 22 REG_PADCFG2 "4'b1010" 
22 23 23 REG_PADCFG3 "4'b1011" 
22 24 24 REG_PADCFG4 "4'b1100" 
22 25 25 REG_PADCFG5 "4'b1101" 
22 26 26 REG_PADCFG6 "4'b1110" 
22 27 27 REG_PADCFG7 "4'b1111" 
22 30 30 VERSION "5'b00010" 
22 31 31 DATA_RAM "8'b00000100" 
22 32 32 INSTR_RAM "8'b00000100" 
22 33 33 ROM "5'b00000" 
22 34 34 ICACHE "1'b0" 
22 35 35 DCACHE "1'b0" 
23 11 11 log2 "((VALUE) < ( 1 ) ? 0 : (VALUE) < ( 2 ) ? 1 : (VALUE) < ( 4 ) ? 2 : (VALUE) < ( 8 ) ? 3 : (VALUE) < ( 16 )  ? 4 : (VALUE) < ( 32 )  ? 5 : (VALUE) < ( 64 )  ? 6 : (VALUE) < ( 128 ) ? 7 : (VALUE) < ( 256 ) ? 8 : (VALUE) < ( 512 ) ? 9 : (VALUE) < ( 1024 ) ? 10 : (VALUE) < ( 2048 ) ? 11 : (VALUE) < ( 4096 ) ? 12 : (VALUE) < ( 8192 ) ? 13 : (VALUE) < ( 16384 ) ? 14 : (VALUE) < ( 32768 ) ? 15 : (VALUE) < ( 65536 ) ? 16 : (VALUE) < ( 131072 ) ? 17 : (VALUE) < ( 262144 ) ? 18 : (VALUE) < ( 524288 ) ? 19 : (VALUE) < ( 1048576 ) ? 20 : (VALUE) < ( 1048576 * 2 ) ? 21 : (VALUE) < ( 1048576 * 4 ) ? 22 : (VALUE) < ( 1048576 * 8 ) ? 23 : (VALUE) < ( 1048576 * 16 ) ? 24 : 25)" 
27 12 11 APU "" 
28 16 16 REG_S1 "19:15" 
28 17 17 REG_S2 "24:20" 
28 18 18 REG_S3 "29:25" 
28 19 19 REG_D "11:07" 
28 21 21 REG_RM "14:12" 
28 23 31 USE_APU_DSP_MULT "if (SHARED_DSP_MULT) begin                             mult_int_en     = 1'b0;                             mult_dot_en     = 1'b0;                             apu_en          = 1'b1;                             apu_type_o      = APUTYPE_DSP_MULT;                             apu_flags_src_o = APU_FLAGS_DSP_MULT;                             apu_op_o        = mult_operator_o;                             apu_lat_o       = (PIPE_REG_DSP_MULT==1) ? 2'h2 : 2'h1;                          end" 
28 33 41 USE_APU_INT_MULT "if (SHARED_INT_MULT) begin                             mult_int_en     = 1'b0;                             mult_dot_en     = 1'b0;                             apu_en          = 1'b1;                             apu_flags_src_o = APU_FLAGS_INT_MULT;                             apu_op_o        = mult_operator_o;                             apu_type_o      = APUTYPE_INT_MULT;                             apu_lat_o       = 2'h1;                          end" 
28 43 49 USE_APU_INT_DIV "if (SHARED_INT_DIV) begin                            alu_en = 1'b0;                            apu_en = 1'b1;                            apu_type_o = APUTYPE_INT_DIV;                            apu_op_o = alu_operator_o;                            apu_lat_o       = 2'h3;                          end" 
28 51 60 FP_2OP "if (FPU==1) begin                  apu_en              = 1'b1;                  alu_en_o            = 1'b0;                  apu_flags_src_o     = APU_FLAGS_FP;                  rega_used_o         = 1'b1;                  regb_used_o         = 1'b1;                  reg_fp_a_o          = 1'b1;                  reg_fp_b_o          = 1'b1;                  reg_fp_d_o          = 1'b1;                end" 
28 62 74 FP_3OP "if (FPU==1) begin                  apu_en              = 1'b1;                  alu_en_o            = 1'b0;                  apu_flags_src_o     = apu_core_package::APU_FLAGS_FP;                  rega_used_o         = 1'b1;                  regb_used_o         = 1'b1;                  regc_used_o         = 1'b1;                  reg_fp_a_o          = 1'b1;                  reg_fp_b_o          = 1'b1;                  reg_fp_c_o          = 1'b1;                  reg_fp_d_o          = 1'b1;                  regc_mux_o          = REGC_S4;                end" 
32 15 15 OKAY "2'b00" 
32 16 16 EXOKAY "2'b01" 
32 17 17 SLVERR "2'b10" 
32 18 18 DECERR "2'b11" 
46 12 12 AXI_BUS_SV "" 
46 21 21 OKAY "2'b00" 
57 11 11 OKAY "2'b00" 
57 12 12 EXOKAY "2'b01" 
57 13 13 SLVERR "2'b10" 
57 14 14 DECERR "2'b11" 
67 11 11 OKAY "2'b00" 
67 12 12 EXOKAY "2'b01" 
67 13 13 SLVERR "2'b10" 
67 14 14 DECERR "2'b11" 
75 12 12 CONFIG_SV "" 
75 13 13 RISCV "" 
75 17 17 ASIC "" 
75 22 22 ROM_ADDR_WIDTH "12" 
75 23 23 ROM_START_ADDR "32'h8000" 
76 11 11 OKAY "2'b00" 
76 12 12 EXOKAY "2'b01" 
76 13 13 SLVERR "2'b10" 
76 14 14 DECERR "2'b11" 
85 12 12 DEBUG_BUS_SV "" 
86 14 14 ADR_MAX_ADR "2'd2" 
86 16 16 IRQ "2'b00" 
86 17 17 EVENT "2'b01" 
86 18 18 SLEEP "2'b10" 
86 21 21 REGS_MAX_IDX "'d3" 
86 22 22 REGS_MAX_ADR "'d2" 
86 24 24 REG_ENABLE "2'b00" 
86 25 25 REG_PENDING "2'b01" 
86 26 26 REG_SET_PENDING "2'b10" 
86 27 27 REG_CLEAR_PENDING "2'b11" 
86 29 29 REGS_SLEEP_MAX_IDX "'d1" 
86 31 31 REG_SLEEP_CTRL "2'b0" 
86 32 32 REG_SLEEP_STATUS "2'b1" 
86 34 34 SLEEP_ENABLE "5'b0" 
86 35 35 SLEEP_STATUS "5'b0" 
96 55 55 I2C_CMD_NOP "4'b0000" 
96 56 56 I2C_CMD_START "4'b0001" 
96 57 57 I2C_CMD_STOP "4'b0010" 
96 58 58 I2C_CMD_WRITE "4'b0100" 
96 59 59 I2C_CMD_READ "4'b1000" 
106 14 14 AXI_ADDR_WIDTH "32" 
106 15 15 AXI_DATA_WIDTH "32" 
106 16 16 AXI_ID_MASTER_WIDTH "2" 
106 17 17 AXI_ID_SLAVE_WIDTH "4" 
106 18 18 AXI_USER_WIDTH "1" 
118 29 29 ASIC_SYNTHESIS "" 
118 168 168 MSTATUS_UIE_BITS "0" 
118 169 169 MSTATUS_SIE_BITS "1" 
118 170 170 MSTATUS_MIE_BITS "3" 
118 171 171 MSTATUS_UPIE_BITS "4" 
118 172 172 MSTATUS_SPIE_BITS "5" 
118 173 173 MSTATUS_MPIE_BITS "7" 
118 174 174 MSTATUS_SPP_BITS "8" 
118 175 175 MSTATUS_MPP_BITS "12:11" 
118 176 176 MSTATUS_MPRV_BITS "17" 
125 31 31 REG_S1 "19:15" 
125 32 32 REG_S2 "24:20" 
125 33 33 REG_S4 "31:27" 
125 34 34 REG_D "11:07" 
